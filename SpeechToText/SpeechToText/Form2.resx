<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>